# -*- coding: utf-8 -*-
"""Dash_Longevidad_Hombres.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MakM1OX5Mj8MO--ox4xBiK__0hzcrnm
"""

!pip install jupyter-dash -q

!pip install dash-cytoscape -q

from jupyter_dash import JupyterDash

import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.express as px
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd
from dash.dependencies import Input, Output

#f = r'C:\Users\Jos√® Valencia\Desktop\Barcelona Master\Semestre lV\CatedraUBZ\Provisions\rentas_P2.xlsx'
f = 'rentas_P2.xlsx'
nuevo = r'https://raw.githubusercontent.com/Joevalencia/UBZurich-Challenge/main/Mejoras.csv'
matrice2 = pd.read_csv(nuevo).iloc[:, 1:]
df = pd.read_csv(r'https://raw.githubusercontent.com/Joevalencia/UBZurich-Challenge/main/Cohorte61.csv',
                 index_col=0)
iproh = pd.read_excel(f, sheet_name='I PRO H', skiprows=1, index_col=0)
dproh = pd.read_excel(f, sheet_name='D PRO H', skiprows=1, index_col=0)
tproh = pd.read_excel(f, sheet_name='SCR H', skiprows=1, index_col=0)
mort = pd.read_csv(r'https://raw.githubusercontent.com/Joevalencia/UBZurich-Challenge/main/Lx_mortalidad.csv',
                   index_col=0, sep=';')

## Hombres
f1 = r'https://raw.githubusercontent.com/Joevalencia/Planes_pensione_ALM/main/lxLCm.csv'  # LC
f2 = r'https://raw.githubusercontent.com/Joevalencia/Planes_pensione_ALM/main/lxRHm.csv'  # rh
f3 = r'https://raw.githubusercontent.com/Joevalencia/douglas/main/PERM1.csv'  ## perm

## Dataframe
lc_hombres = pd.read_csv(f1, sep=';').iloc[:112, 1:]
rh_hombres = pd.read_csv(f2, sep=';').iloc[:112, 1:]
perm = pd.read_csv(f3).iloc[:112, 1:]/10

## Mujeres
lx_lcf = pd.read_csv(r'https://raw.githubusercontent.com/Joevalencia/douglas/main/lxLCf.csv').iloc[:112, 1:]
lx_rhf = pd.read_csv(r'https://raw.githubusercontent.com/Joevalencia/douglas/main/lxRHf.csv').iloc[:112, 1:]
perf = pd.read_csv(r'https://raw.githubusercontent.com/Joevalencia/douglas/main/PERF1.csv').iloc[:112, 1:] / 10

mort = mort.iloc[:len(df.iloc[:, 0]), :] / 10
colu = mort.columns
nas = iproh.iloc[-1:, :].columns
nas2 = tproh.iloc[-1:, :].columns


# Figuras del Dashboard

# Total Prov
def thist_pro(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=nas,
                         y=mat1.iloc[-1, :].values,
                         name='Pro PERM',
                         marker_color='rgba(238, 8, 61, 0.52)'
                         ))
    fig.update_xaxes(title_text='Total Provisiones', color='ivory')
    fig.update_yaxes(range=[0, 90e6], color='ivory')
    fig.update_layout(
        title='Total Provisiones por Longevidad',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Valores en u.m',
            titlefont_size=12,
            tickfont_size=12,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Total Prov
def thist_scr(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=nas2,
                         y=mat1.iloc[-1, :].values,
                         name='SCR PERM',
                         marker_color='rgba(238, 8, 61, 0.52)'
                         ))
    fig.update_xaxes(title_text='Total Solvency Capital Requirement', color='ivory')
    fig.update_yaxes(range=[0, 7e6], color='ivory')
    fig.update_layout(
        title='Total SCR por Longevidad',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Valores en u.m',
            titlefont_size=12,
            tickfont_size=12,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Histograma
def hist_pro(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM2020',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='Lee-Carter',
                         marker_color='rgba(232, 235, 68, 0.8)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 2],
                         name='Renshaw-Haberman',
                         marker_color='rgba(54, 235, 68, 0.8)'
                         ))
    fig.update_xaxes(title_text='Provisiones por tramos de edad', color='ivory')
    fig.update_yaxes(range=[0, 28e6], color='ivory')
    fig.update_layout(
        title='Provisiones PERM vs LC vs RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Valores en u.m.',
            titlefont_size=12,
            tickfont_size=12,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Histograma
def hist_scr(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM2020',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='Lee-Carter',
                         marker_color='rgba(232, 235, 68, 0.8)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 2],
                         name='Renshaw-Haberman',
                         marker_color='rgba(54, 235, 68, 0.8)'
                         ))
    fig.update_xaxes(title_text='SCR por tramos de edad', color='ivory')
    fig.update_yaxes(range=[0, 1.5e6], color='ivory')
    fig.update_layout(
        title='SCR PERM vs LC vs RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Valores en u.m.',
            titlefont_size=12,
            tickfont_size=12,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Histograma diferencies
def dhist_prov_hombre(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM-LC',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='PERM-RH',
                         marker_color='rgba(217, 217, 36, 0.8)'
                         ))
    fig.add_hline(y=1000000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.add_hline(y=-1000000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.update_xaxes(title_text='Diferencias', color='ivory')
    fig.update_yaxes(color='ivory')
    fig.update_layout(
        title='Diferencia PERM-LC vs PERM-RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Diferencias',
            titlefont_size=14,
            tickfont_size=14,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Histograma diferencies
def dhist_scr_hombre(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM-LC',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='PERM-RH',
                         marker_color='rgba(217, 217, 36, 0.8)'
                         ))
    fig.update_xaxes(title_text='Diferencias', color='ivory')
    fig.add_hline(y=100000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.add_hline(y=-100000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.update_yaxes(color='ivory')
    fig.update_layout(
        title='Diferencia PERM-LC vs PERM-RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Diferencias',
            titlefont_size=14,
            tickfont_size=14,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig

# Histograma diferencies
def dhist_prov_mujer(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM-LC',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='PERM-RH',
                         marker_color='rgba(217, 217, 36, 0.8)'
                         ))
    fig.add_hline(y=1000000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.add_hline(y=-1000000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.update_xaxes(title_text='Diferencias', color='ivory')
    fig.update_yaxes(color='ivory')
    fig.update_layout(
        title='Diferencia PERM-LC vs PERM-RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Diferencias',
            titlefont_size=14,
            tickfont_size=14,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# Histograma diferencies
def dhist_scr_mujer(mat1):
    l2 = go.Layout(
        paper_bgcolor="rgb(41, 64, 82)",
        plot_bgcolor="rgb(21,52,80)")
    fig = go.Figure(layout=l2)
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 0],
                         name='PERM-LC',
                         marker_color='rgba(54, 60, 182, 0.57)'
                         ))
    fig.add_trace(go.Bar(x=mat1.index,
                         y=mat1.iloc[:, 1],
                         name='PERM-RH',
                         marker_color='rgba(217, 217, 36, 0.8)'
                         ))
    fig.update_xaxes(title_text='Diferencias', color='ivory')
    fig.add_hline(y=100000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.add_hline(y=-100000, line_width=5, line_dash='solid', line_color='rgba(212, 60, 28, 1)')
    fig.update_yaxes(color='ivory')
    fig.update_layout(
        title='Diferencia PERM-LC vs PERM-RH',
        title_font_color='gold',
        xaxis_tickfont_size=14,
        yaxis=dict(
            title='Diferencias',
            titlefont_size=14,
            tickfont_size=14,
        ),
        legend=dict(
            x=0,
            y=1.0,
            bgcolor='ivory',
            bordercolor='ivory'
        ),
        barmode='group',
        bargap=0.5,  # gap between bars of adjacent location coordinates.
        bargroupgap=0.1  # gap between bars of the same location coordinate.
    )
    return fig


# PLot Multiple Life
def lifeplot_2(cohort1, cohorte2, model=None, interactive: bool = True, qx_log: bool = True,
               death: bool = True):
    """
    It plots the graph of multiple cohorts interactively or static either.

    :param cohort1: The cohort function (lx).

    :param cohorte2: The cohort function (ly).
                     If len(ly)<len(x) please consider passing ly as cohorte.

    :param model: A third cohort function (lz).

    :param qx_log: If True it displays log(qx) cohorts using plotly.

    :param interactive: If True it displays cohorts interactively using plotly.

    :param death: If True it displays dx cohorts using plotly.

    :return: Living Plot, Log(qx) or dx either.

    """

    ful = []  ## considerar poner como cohorte2 el vector que tiene diferente longitud en interactively
    if len(cohort1) != len(cohorte2):
        for i in range(abs(len(cohort1) - len(cohorte2))):
            ful.append(0)
        cohort2 = cohorte2.append(pd.Series(ful),
                                  ignore_index=True).astype(str(cohort1.dtype))

    else:
        cohort2 = cohorte2

    #
    px1 = (cohort1.shift(-1) / cohort1).fillna(0)
    px2 = (cohort2.shift(-1) / cohort2).fillna(0)
    qx1, qx2 = 1 - px1, 1 - px2
    dx1, dx2 = qx1 * cohort1, qx2 * cohort2
    qx22 = 1 - (cohorte2.shift(-1) / cohorte2).fillna(0)
    dx22 = qx22 * cohorte2

    e1 = []
    for i in range(0, len(cohort1[:-1])):
        ley = cohort1[i]
        e1.append(sum(cohort1[i + 1:-1]) / ley)
    eyx = pd.Series(e1) + .5

    e2 = []
    for i in range(0, len(cohort2[:-1])):
        ley = cohort2[i]
        e2.append(sum(cohort2[i + 1:-1]) / ley)
    eys = pd.Series(e2) + .5

    df1 = pd.DataFrame({f'{cohort1.name}': cohort1, 'e\u20931': round(eyx, 2),
                        f'{cohort2.name}': cohort2, 'e\u20932': round(eys, 2),
                        'Edad': cohort1.index, f'Death {cohort1.name}': dx1,
                        f'Death {cohort2.name}': dx2})

    if not interactive:
        plt.figure(figsize=(15, 5))
        p0 = plt.subplot(1, 2, 1)
        plt.title(f'Funcion cohorte de {cohort1.name} '
                  f'y {cohorte2.name}', fontweight='bold')
        plt.xlabel('Edad', fontweight='bold')
        plt.ylabel('Living people ($l_{x}$) and ($l_{y}$)', fontweight='bold')
        plt.xlim([0, 120])
        plt.plot(cohort1.index, cohort1, label=f'{cohort1.name}', color='darkorange')
        plt.plot(cohorte2.index, cohorte2, label=f'{cohorte2.name}', color='midnightblue')
        # plt.legend()
        if model is not None:
            plt.plot(model.index, model, label=f'{model.name}', color='red')
        plt.legend()
        p1 = plt.subplot(1, 2, 2)
        plt.title(f'Death Plot of {cohort1.name} '
                  f'and {cohorte2.name}', fontweight='bold')
        plt.ylabel('Death people ($d_{x}$) and ($d_{y}$)', fontweight='bold')
        plt.xlabel('Edad', fontweight='bold')
        plt.xlim([0, 120])
        if qx_log is True:
            plt.title(f'LogDeath Plot of {cohort1.name} '
                      f'and {cohorte2.name}', fontweight='bold')
            plt.ylabel('LogDeath ($d_{x}$) and ($d_{y}$)', fontweight='bold')
            plt.plot(np.log(qx1), label=f'{cohort1.name}', color='darkorange')
            plt.plot(np.log(qx22), label=f'{cohorte2.name}', color='midnightblue')
        else:
            plt.plot(dx1, label=f'{cohort1.name}', color='darkorange')
            plt.plot(dx22, label=f'{cohorte2.name}', color='midnightblue')

        if model is not None:
            pxm = ((model / model.shift(1)).shift(-1)).fillna(0)
            qxm = 1 - pxm
            dxm = qxm * model

            if qx_log is True:
                plt.plot(np.log(qxm.replace(0, 1)), label=f'{model.name}', color='red')
            else:
                plt.plot(dxm, label=f'{model.name}', color='red')

        plt.legend()

        plt.show()

    else:
        import plotly.express as px
        if not death:
            fig = px.line(df1, x='Edad', y=[f'{cohort1.name}', f'{cohort2.name}'],
                          hover_data=['e\u20931', 'e\u20932'],
                          title=f'Funci√≥n cohorte de {cohort1.name} y {cohort2.name}')
        else:
            if qx_log is True:
                fig = px.line(df1, x='Edad', y=[f'Death {cohort1.name}', f'Death {cohort2.name}'],
                              hover_data=['e\u20931', 'e\u20932'], log_y=True,
                              title=f'Gr√°fico log(qx) de {cohort1.name} y {cohort2.name}')
            else:
                fig = px.line(df1, x='Edad', y=[f'Death {cohort1.name}', f'Death {cohort2.name}'],
                              hover_data=['e\u20931', 'e\u20932'],
                              title=f'Death plot of {cohort1.name} and {cohort2.name}')
        if model is not None:
            pxm = ((model / model.shift(1)).shift(-1)).fillna(0)
            qxm = 1 - pxm
            dxm = qxm * model
            em = []
            for s in range(0, len(model[:-1])):
                luc = model[s]
                em.append(sum(model[s + 1:-1]) / luc)
            emm = pd.Series(em) + .5
            df2 = pd.DataFrame({f'{cohort1.name}': cohort1, f'qx_{cohort1.name}': round(qx1, 7),
                                f'{cohort2.name}': cohort2, f'qx_{cohort2.name}': round(qx2, 7),
                                f'{model.name}': model, f'qx_{model.name}': round(qxm, 7),
                                'Edad': cohort1.index, f'Death {cohort1.name}': round(dx1, 2),
                                f'Death {cohort2.name}': round(dx2, 2), f'Death {model.name}': round(dxm, 2),
                                'e\u20931': round(eyx, 2), 'e\u20932': round(eys, 2),
                                'e\u20933': round(emm, 2)})
            if death is True:

                fig = px.line(df2, x='Edad', y=[f'Death {cohort1.name}',
                                                f'Death {cohort2.name}',
                                                f'Death {model.name}'],
                              hover_data=[f'qx_{cohort1.name}', f'qx_{cohort2.name}', f'qx_{model.name}'],
                              title=f'Death plot of {cohort1.name}, {cohort2.name} and {model.name}')
                if qx_log is True:
                    fig = px.line(df2, x='Edad', y=[f'qx_{cohort1.name}',
                                                    f'qx_{cohort2.name}',
                                                    f'qx_{model.name}'], log_y=True,
                                  hover_data=[f'Death {cohort1.name}',
                                              f'Death {cohort2.name}',
                                              f'Death {model.name}'],
                                  title=f'Gr√°fico log(qx) de {cohort1.name}, '
                                        f'{cohort2.name} y {model.name}')

            else:
                fig = px.line(df2, x='Edad', y=[f'{cohort1.name}',
                                                f'{cohort2.name}',
                                                f'{model.name}'],
                              hover_data=['e\u20931', 'e\u20932', 'e\u20933'],
                              title=f'Funci√≥n cohorte {cohort1.name}, {cohorte2.name} y {model.name}')

        fig.update_layout({
            'plot_bgcolor': 'rgb(21,52,80)',
            'paper_bgcolor': 'rgba(2, 66, 83, 1)',
            'font_family': "Computer Modern Roman",
            'font_color': "ivory",
            'title_font_family': "Computer Modern Roman",
            'title_font_color': "gold",
            'legend_title_font_color': "orange"
        })
        return fig


def mejoras(mat2):
    fig = px.line(mat2, x='Edad', y='log(qx)', log_y=False, text='Cohorte', range_y=[-13,1],
        animation_frame='Cohorte', title='Mejoras en las tasas de mortalidad por generaci√≤n')
    fig.update_traces(textposition="bottom left")
    fig.update_xaxes(tickangle=360)
    fig.update_layout({
            'plot_bgcolor': 'rgb(21,52,80)',
            
            'paper_bgcolor': 'rgba(2, 66, 83, 1)',
            'font_family': "Computer Modern Roman",
            'font_color': "ivory",
        
            'title_font_family': "Computer Modern Roman",
            'title_font_color': "gold",
            'legend_title_font_color': "orange"
        })
    fig.update_layout(xaxis=dict(showgrid=False))
    return fig

## Figura log (qx)
figura2 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'])

## Figura cohorte function
figura3 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'], interactive=True, qx_log=False,
                     death=False)
## Figura cohorte function
figura33 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'], interactive=True, qx_log=False,
                      death=True)

figura4 = lifeplot_2(mort[colu[0]], mort[colu[1]], mort[colu[2]])
figura5 = lifeplot_2(mort[colu[0]], mort[colu[1]], mort[colu[2]]
                     , interactive=True, qx_log=False, death=False)
## APP DASH

app = JupyterDash(__name__)  
app.layout = html.Div(style={'backgroundColor': 'rgb(21,52,80)', 'display': 'inline-block'},
                      children=[
                          html.H1(children='Zeta-LifeMetrics',
                                  style={'backgroundColor': 'rgb(21,52,80)',
                                         'textAlign': 'center',
                                         'padding': '16px 0 16px 20px',
                                         'color': 'ivory',
                                         'font-family': 'Computer Modern Roman',
                                         'font-size': '450%'}),  # Papyrus

                          html.P(children='C√†tedra UBZurich 9¬∞ Challenge',
                                 style={'backgroundColor': 'rgb(21,52,80)',
                                        'textAlign': 'center',
                                        'padding': '10px 0 10px 14px',
                                        'color': 'gold',
                                        'font-family': 'ZERO HOUR',
                                        'font-size': '150%'

                                        }
                                 ),
                          html.Div(children='''
        Zeta-LifeMetrics: Un Dashboard din√°mico hecho en Python para la gesti√≥n del riesgo bi√≥metrico.
    ''', style={'textAlign': 'center', 'color': 'ivory',
                'font-family': 'ZERO HOUR', 'font-size': '170%'}),

                          html.Br(),

                          html.P('Seleccionar el riesgo a gestionar',
                                 className='fix_label', style={'textAlign': 'center',
                                                               'color': 'gold',
                                                               'margin-top': '6px',
                                                               'font-size': '155%',
                                                               }
                                 ),
                          dcc.RadioItems(id='Seleccionar el riesgo a gestionar',
                                         labelStyle={'display': 'inline-block'},
                                         options=[
                                             {'label': 'Longevidad', 'value': 'Longevidad'},
                                             {'label': 'Mortalidad', 'value': 'Mortalidad'}
                                         ], style={'textAlign': 'center',
                                                   'margin-top': '6px',
                                                   'font-size': '125%',
                                                   'color': 'gold'}
                                         ),
                          html.Br(),

                          html.H3(children='Deslizar para visualizar el gr√°fico de la cohorte',
                                  style={'backgroundColor': 'rgb(21,52,80)',
                                         'textAlign': 'center',
                                         'padding': '10px 0 10px 14px',
                                         'color': 'gold',
                                         'font-family': 'ZERO HOUR',
                                         'font-size': '150%'

                                         }),

                          html.Br(),

                          html.Div(
                              dcc.Slider(
                                  min=1961,
                                  max=1982,
                                  step=None,
                                  tooltip={"placement": "bottom", "always_visible": True},
                                  id='annata',
                                  value=1961,
                                  marks={str(year): str(year) for year in pd.Series(np.arange(1961,
                                                                                              1983)).unique()
                                         }
                              ), style={
                                  'display': 'center',
                                  'color': 'ivory',
                                  'font-weight': 'bold'}
                          ),

                          html.Br(),

                          html.P('Seleccionar el sexo a visualizar',
                                 className='fix_label', style={'textAlign': 'center',
                                                               'color': 'gold',
                                                               'margin-top': '6px',
                                                               'font-size': '155%',
                                                               }
                                 ),
                          dcc.RadioItems(id='Seleccionar el sexo a visualizar',
                                         labelStyle={'display': 'inline-block'},
                                         options=[
                                             {'label': 'Hombres', 'value': 'Hombres'},
                                             {'label': 'Mujeres', 'value': 'Mujeres'}
                                         ], style={'textAlign': 'center',
                                                   'margin-top': '6px',
                                                   'font-size': '125%',
                                                   'color': 'gold'}
                                         ),
                          html.Br(),

                          html.Div([
                              dcc.Graph(id='gra33'),
                              dcc.Graph(id='gra3'),
                              dcc.Graph(id='gra2')

                          ], style={'width': '50%',
                                    'display': 'flex'}
                          ),

                          html.Br(),

                          html.Div([
                              html.P('Seleccionar el sexo para visualizar las Provisiones y SCR',
                                     className='fix_label',
                                     style={'textAlign': 'center',
                                            'margin-top': '6px',
                                            'font-size': '155%',
                                            'color': 'gold'})
                              ,
                              dcc.RadioItems(id='Sexo del asegurado',
                                             labelStyle={'display': 'inline-block'},

                                             options=[
                                                 {'label': 'Hombres', 'value': 'Hombres'},
                                                 {'label': 'Mujeres', 'value': 'Mujeres'}
                                             ], value='Hombres',
                                             style={'textAlign': 'center',
                                                    'color': 'gold',
                                                    'font-size': '125%'},
                                             className='dcc_compon'
                                             ),

                          ]),

                          html.Br(),

                          html.Div([
                              dcc.Graph(id='tot', style={'color': 'navy'},
                                        figure={}),
                              dcc.Graph(id='ProvM', style={'color': 'gold'},
                                        figure={}),
                              dcc.Graph(id='diferencia', style={'color': 'navy'},
                                        figure={})

                          ], style={'width': '50%', 'display': 'flex'}),

                          html.Br(),

                          html.Div([
                              dcc.Graph(id='tot2', style={'color': 'navy'},
                                        figure={}),
                              dcc.Graph(id='ProvM2', style={'color': 'gold'},
                                        figure={}),
                              dcc.Graph(id='diferencia2', style={'color': 'navy'},
                                        figure={})

                          ], style={'width': '50%', 'display': 'flex'}

                          )
                      ])


## Hombres
@app.callback([
            Output('gra33', 'figure'),
            Output('gra3', 'figure'),
            Output('gra2', 'figure'),

        ], [Input(
            'annata', 'value'
        )])

def zero_plot(value):

    if value == 1961:
        g1 = lifeplot_2(lc_hombres['LC1961'], perm['PERM1961'], rh_hombres['RH1961'])
        ## Figura cohorte function
        g2 = lifeplot_2(lc_hombres['LC1961'], perm['PERM1961'], rh_hombres['RH1961'], interactive=True,
                        qx_log=False,
                        death=False)
        ## Figura cohorte function
        g3 = mejoras(matrice2)
        return g3, g1, g2
    elif value == 1965:
        g1 = lifeplot_2(lc_hombres['LC1965'], perm['PERM1965'], rh_hombres['RH1965'])
        ## Figura cohorte function
        g2 = lifeplot_2(lc_hombres['LC1965'], perm['PERM1965'], rh_hombres['RH1965'], interactive=True,
                        qx_log=False,
                        death=False)
        ## Figura cohorte function
        g3 = mejoras(matrice2)
        return g3, g1, g2
    elif value == 1970:
        g1 = lifeplot_2(lc_hombres['LC1970'], perm['PERM1970'], rh_hombres['RH1970'])
        ## Figura cohorte function
        g2 = lifeplot_2(lc_hombres['LC1970'], perm['PERM1970'], rh_hombres['RH1970'], interactive=True,
                        qx_log=False,
                        death=False)
        ## Figura cohorte function
        g3 = mejoras(matrice2)
        return g3, g1, g2
    elif value == 1975:
        g1 = lifeplot_2(lc_hombres['LC1975'], perm['PERM1975'], rh_hombres['RH1975'])
        ## Figura cohorte function
        g2 = lifeplot_2(lc_hombres['LC1975'], perm['PERM1975'], rh_hombres['RH1975'], interactive=True,
                        qx_log=False,
                        death=False)
        ## Figura cohorte function
        g3 = mejoras(matrice2)
        return g3, g1, g2
    elif value == 1980:
        g1 = lifeplot_2(lc_hombres['LC1980'], perm['PERM1980'], rh_hombres['RH1980'])
        ## Figura cohorte function
        g2 = lifeplot_2(lc_hombres['LC1980'], perm['PERM1980'], rh_hombres['RH1980'], interactive=True,
                        qx_log=False,
                        death=False)
        ## Figura cohorte function
        g3 = mejoras(matrice2)
        return g3, g1, g2

#
# ## Mujeres
#
# @app.callback([
#     Output('gra2', 'figure'),
#     Output('gra3', 'figure'),
#     Output('gra33', 'figure'),
#
# ], [Input(
#     'annata', 'value'
# )]
# )
# def zero_plot(value):
#     # global g3, g1, g2
#     lx_lcf_name = lx_lcf.columns
#     lx_rhf_name = lx_lcf.columns
#     perf_name = perf.columns
#
#     if value == 1961:
#         g1 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'])
#         ## Figura cohorte function
#         g2 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'], interactive=True,
#                         qx_log=False,
#                         death=False)
#         ## Figura cohorte function
#         g3 = lifeplot_2(lx_lcf['LC1961'], perf['PERF1961'], lx_rhf['RH1961'], interactive=True, qx_log=False,
#                         death=True)
#         return g1, g2, g3
#     elif value == 1965:
#         g1 = lifeplot_2(lx_lcf['LC1965'], perf['PERF1965'], lx_rhf['RH1965'])
#         ## Figura cohorte function
#         g2 = lifeplot_2(lx_lcf['LC1965'], perf['PERF1965'], lx_rhf['RH1965'], interactive=True, qx_log=False,
#                         death=False)
#         ## Figura cohorte function
#         g3 = lifeplot_2(lx_lcf['LC1965'], perf['PERF1965'], lx_rhf['RH1965'], interactive=True, qx_log=False,
#                         death=True)
#         return g1, g2, g3
#     elif value == 1970:
#         g1 = lifeplot_2(lx_lcf['LC1970'], perf['PERF1970'], lx_rhf['RH1970'])
#         ## Figura cohorte function
#         g2 = lifeplot_2(lx_lcf['LC1970'], perf['PERF1970'], lx_rhf['RH1970'], interactive=True, qx_log=False,
#                         death=False)
#         ## Figura cohorte function
#         g3 = lifeplot_2(lx_lcf['LC1970'], perf['PERF1970'], lx_rhf['RH1970'], interactive=True, qx_log=False,
#                         death=True)
#         return g1, g2, g3
#     elif value == 1975:
#         g1 = lifeplot_2(lx_lcf['LC1975'], perf['PERF1975'], lx_rhf['RH1975'])
#         ## Figura cohorte function
#         g2 = lifeplot_2(lx_lcf['LC1975'], perf['PERF1975'], lx_rhf['RH1975'], interactive=True, qx_log=False,
#                         death=False)
#         ## Figura cohorte function
#         g3 = lifeplot_2(lx_lcf['LC1975'], perf['PERF1975'], lx_rhf['RH1975'], interactive=True, qx_log=False,
#                         death=True)
#         return g1, g2, g3
#     elif value == 1980:
#         g1 = lifeplot_2(lx_lcf['LC1980'], perf['PERF1980'], lx_rhf['RH1980'])
#         ## Figura cohorte function
#         g2 = lifeplot_2(lx_lcf['LC1980'], perf['PERF1980'], lx_rhf['RH1980'], interactive=True, qx_log=False,
#                         death=False)
#         ## Figura cohorte function
#         g3 = lifeplot_2(lx_lcf['LC1980'], perf['PERF1980'], lx_rhf['RH1980'], interactive=True, qx_log=False,
#                         death=True)
#         return g1, g2, g3


@app.callback([
    Output('tot', 'figure'),
    Output('ProvM', 'figure'),
    Output('diferencia', 'figure'),
    Output('tot2', 'figure'),
    Output('ProvM2', 'figure'),
    Output('diferencia2', 'figure')
], [Input(
    'Sexo del asegurado', 'value'
)]
)
def primer_plot(value):
    if value == 'Hombres':
        iproh = pd.read_excel(f, sheet_name='I PRO H', skiprows=1, index_col=0)
        dproh = pd.read_excel(f, sheet_name='D PRO H', skiprows=1, index_col=0)
        tproh = pd.read_excel(f, sheet_name='PRO H', skiprows=1, index_col=0)
        scr1 = pd.read_excel(f, sheet_name='I SCR H', skiprows=1, index_col=0)
        scr2 = pd.read_excel(f, sheet_name='D SCR H', skiprows=1, index_col=0)
        scr3 = pd.read_excel(f, sheet_name='SCR H', skiprows=1, index_col=0)
        thist_2 = thist_scr(scr3)
        his1_2 = hist_scr(scr1)
        dhist_2 = dhist_scr_hombre(scr2)
        thist = thist_pro(tproh)
        his1 = hist_pro(iproh)
        dhist = dhist_prov_hombre(dproh)

    else:
        iproh = pd.read_excel(f, sheet_name='I PRO M', skiprows=1, index_col=0)
        dproh = pd.read_excel(f, sheet_name='D PRO M', skiprows=1, index_col=0)
        tproh = pd.read_excel(f, sheet_name='PRO M', skiprows=1, index_col=0)
        scr1 = pd.read_excel(f, sheet_name='I SCR M', skiprows=1, index_col=0)
        scr2 = pd.read_excel(f, sheet_name='D SCR M', skiprows=1, index_col=0)
        scr3 = pd.read_excel(f, sheet_name='SCR M', skiprows=1, index_col=0)
        thist_2 = thist_scr(scr3)
        his1_2 = hist_scr(scr1)
        dhist_2 = dhist_scr_mujer(scr2)
        thist = thist_pro(tproh)
        his1 = hist_pro(iproh)
        dhist = dhist_prov_mujer(dproh)

    return thist, his1, dhist, thist_2, his1_2, dhist_2

if __name__ == '__main__':
    app.run_server(debug=True)

